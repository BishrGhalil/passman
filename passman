#!/bin/python
from cryptography.fernet import Fernet
import getpass
import os
import sqlite3

clear = lambda: os.system('clear')

# Colors
class bcolors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Creat a database if doesn't exist and connect to the database if exist
def conn():
    try:
        conn = sqlite3.connect(f'/home/{getpass.getuser()}/database/pass.db')
        cur = conn.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS passwds(
                                    ID integer PRIMARY KEY AUTOINCREMENT,
                                    SERVICE TEXT NOT NULL,
                                    USERNAME TEXT NOT NULL,
                                    PASSWD TEXT NOT NULL
                                );""")
        conn.commit()
        conn.close()
    except sqlite3.Error as e:
        print(e)

# Check if a service exist
def CheckService(service):
    conn = sqlite3.connect('/home/bishr/database/pass.db')
    cur = conn.cursor()
    cur.execute("SELECT ID FROM passwds WHERE SERVICE = ?", (service,))
    data = cur.fetchall()
    if len(data) >=1:
        return True
    else:
        return False

# Add a password to the database
def AddPass(service, username, passwd):
    conn = sqlite3.connect('/home/bishr/database/pass.db')
    cur = conn.cursor()
    datatuple = (service, username, passwd)
    cur.execute(f"""INSERT INTO passwds (SERVICE, USERNAME, PASSWD) VALUES (?,?,?);""",datatuple)
    conn.commit()
    conn.close()

# Get a site's password from the database
def GetPass(service):
    conn = sqlite3.connect('/home/bishr/database/pass.db')
    cur = conn.cursor()
    cur.execute("SELECT PASSWD from passwds WHERE SERVICE=?", (service, ))
    passwd = cur.fetchall()
    conn.close()
    return passwd

# Get a site's username from the database
def GetUser(service):
    conn = sqlite3.connect('/home/bishr/database/pass.db')
    cur = conn.cursor()
    cur.execute("SELECT USERNAME from passwds WHERE SERVICE=?", (service, ))
    username = cur.fetchall()
    conn.close()
    return username

# Get all saved passwords
def GetAll():
    conn = sqlite3.connect('/home/bishr/database/pass.db')
    cur = conn.cursor()
    cur.execute(""" SELECT * from passwds""")
    data = cur.fetchall()
    conn.close()
    return data

# Delete a password
def Del(service):
    conn = sqlite3.connect('/home/bishr/database/pass.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM passwds WHERE SERVICE=?", (service,))
    conn.commit()
    print(bcolors.FAIL + f"{service} Deleted." + bcolors.ENDC)

# Encypt a string
def encr(message):
    # Instance the Fernet class with the key
    fernet = Fernet(b'D5-Xm4A4x9copCmwcp6MMcLAnOIgQJVDFmDJmkQYvT4=')
    encMessage = fernet.encrypt(message.encode())
    decMessage = fernet.decrypt(encMessage).decode()
    return encMessage

# Decrypt a string
def dencr(encstring):
    fernet = Fernet(b'D5-Xm4A4x9copCmwcp6MMcLAnOIgQJVDFmDJmkQYvT4=')
    decstring = fernet.decrypt(encstring).decode()
    return decstring

# Menu options
def Menu():
    menu = input("Chose an option"
            "\n1- Enter a new password"
            "\n2- Search a password"
            "\n3- View all passwords"
            "\n4- Delete a password"
            "\n5- Exit"
            "\n: ")
    return menu

# Print all saved passwords
def printall():
    data = GetAll()
    r = 1
    for i in data:
        username = dencr(i[2])
        password = dencr(i[3])
        print(f"""{r}-
Service: {i[1]}
Username: {username}
Password: {password}
                    """)
        r += 1

# Main function
def main():
    try:
        print(bcolors.BOLD + f"Hello {getpass.getuser()}." + bcolors.ENDC)
        masterpasswd = "bmj2002"
        ans = ""
        while ans != masterpasswd:
            ans = getpass.getpass("Master password: ")
        conn()
        menu = ""
        key = "b'D5-Xm4A4x9copCmwcp6MMcLAnOIgQJVDFmDJmkQYvT4='"
        clear()


        while menu != '1' or menu != '2':
            menu = Menu()
            if menu == "1" or menu == "add":
                clear()
                serviceName = input("Enter the name of your service: ")
                if CheckService(serviceName):
                    print(bcolors.WARNING + "Service exist.\n" + bcolors.ENDC)
                    continue
                username = input("Enter your username for this service: ")
                password = getpass.getpass("Enter a password for this service: ")
                confirm  = getpass.getpass("Confirm your password: ")
                if not password == confirm:
                    print(bcolors.WARNING + "Doesn't match, Please try again.\n" + bcolors.ENDC)
                    time.sleep(1)
                    continue
                passwd = encr(password)
                username = encr(username)
                AddPass(serviceName, username, passwd)
                clear()
                print(bcolors.GREEN + "Password Added.\n" + bcolors.ENDC)

            elif menu == "2" or menu == "search":
                clear()
                serviceName = input("Enter service Name: ")
                if not CheckService(serviceName):
                    print(bcolors.WARNING + "Service doesn't exist.\n" + bcolors.ENDC)
                    continue

                passwd = GetPass(serviceName)[0][0]
                passwd = dencr(passwd)
                username = GetUser(serviceName)[0][0]
                username = dencr(username)
                print(f"Service: {serviceName}\nUsername: {username}\nPassword: {passwd}")
                print("-" * 15)

            elif menu == "3" or menu == "all":
                printall()
                print("-"*15)

            elif menu == "4" or menu == "delete":
                clear()
                printall()
                print("-"*15)

                serviceName = input("Enter service name to delete: ")
                if CheckService(serviceName):
                    Del(serviceName)
                elif not CheckService(serviceName):
                    print("Service doesn't exist.\n")
                    continue

            elif menu == "5" or menu == "exit":
                print("\nGood bye.")
                exit()
            elif menu == "clear":
                clear()
            else :
                print(bcolors.WARNING + "Not a valid command ):" + bcolors.ENDC)
                print("-"* 15)
    except KeyboardInterrupt:
        print(bcolors.WARNING + "\nExiting..." + bcolors.ENDC)
    except Exception as e:
        print(bcolors.WARNING + str(e) + bcolors.ENDC)

if __name__=="__main__":
    main()

