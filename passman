#!/bin/python
from cryptography.fernet import Fernet
import getpass
import os
import sqlite3
import random, string
import time
import pyperclip as pc
import argparse

clear = lambda: os.system('clear')
TOKEN = b'D5-Xm4A4x9copCmwcp6MMcLAnOIgQJVDFmDJmkQYvT4='
DATA_BASE_PATH = rf'/home/{getpass.getuser()}/database/pass.db'

# Colors
class bcolors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Creat a database if doesn't exist and connect to the database if exist
def conn():
    try:
        conn = sqlite3.connect(DATA_BASE_PATH)
        cur = conn.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS passwds(
                                    ID integer PRIMARY KEY AUTOINCREMENT,
                                    SERVICE TEXT NOT NULL,
                                    USERNAME TEXT NOT NULL,
                                    PASSWD TEXT NOT NULL
                                );""")
        conn.commit()
        conn.close()
    except sqlite3.Error as e:
        print(e)

# Check if a service exist
def CheckService(service):
    conn = sqlite3.connect(DATA_BASE_PATH)
    cur = conn.cursor()
    cur.execute("SELECT ID FROM passwds WHERE SERVICE = ?", (service,))
    data = cur.fetchall()
    if len(data) >=1:
        return True
    else:
        return False

# Add a password to the database
def AddPass(service, username, passwd):
    conn = sqlite3.connect(DATA_BASE_PATH)
    cur = conn.cursor()
    datatuple = (service, username, passwd)
    cur.execute(f"""INSERT INTO passwds (SERVICE, USERNAME, PASSWD) VALUES (?,?,?);""",datatuple)
    conn.commit()
    conn.close()

# Get a site's password from the database
def GetPass(service):
    conn = sqlite3.connect(DATA_BASE_PATH)
    cur = conn.cursor()
    cur.execute("SELECT PASSWD from passwds WHERE SERVICE=?", (service, ))
    passwd = cur.fetchall()
    conn.close()
    return passwd

# Get a site's username from the database
def GetUser(service):
    conn = sqlite3.connect(DATA_BASE_PATH)
    cur = conn.cursor()
    cur.execute("SELECT USERNAME from passwds WHERE SERVICE=?", (service, ))
    username = cur.fetchall()
    conn.close()
    return username

# Get all saved password
def GetAll():
    conn = sqlite3.connect(DATA_BASE_PATH)
    cur = conn.cursor()
    cur.execute(""" SELECT * from passwds""")
    data = cur.fetchall()
    conn.close()
    return data

# Delete a password
def Del(service):
    conn = sqlite3.connect(DATA_BASE_PATH)
    cur = conn.cursor()
    cur.execute("DELETE FROM passwds WHERE SERVICE=?", (service,))
    conn.commit()
    print(bcolors.RED + f"{service} Deleted." + bcolors.ENDC)

# Encypt a string
def encr(message):
    # Instance the Fernet class with the key
    fernet = Fernet(TOKEN)
    encMessage = fernet.encrypt(message.encode())
    decMessage = fernet.decrypt(encMessage).decode()
    return encMessage

# Decrypt a string
def dencr(encstring):
    fernet = Fernet(TOKEN)
    decstring = fernet.decrypt(encstring).decode()
    return decstring

# Menu options
def Menu():
    print(bcolors.BOLD + "Chose an option" + bcolors.ENDC)
    print("""\t1- Enter a new password
        2- Search a password"
        3- View all passwords"
        4- Delete a password"
        5- Make a random password""")
    print(bcolors.RED + "\t6- Exit" + bcolors.ENDC)
    menu = input(": ")
    return menu

# Print all saved passwords
def printall():
    clear()
    conn = sqlite3.connect(DATA_BASE_PATH)
    cur = conn.cursor()
    cur.execute(""" SELECT * from passwds""")
    data = cur.fetchall()
    conn.close()
    for r, i in enumerate(data):
        if i[2] == 'masterpasswd' or i[3]=='masterpasswd':
            continue
        username = dencr(i[2])
        password = dencr(i[3])
        randColor = random.choice([bcolors.GREEN, bcolors.BLUE, bcolors.CYAN, bcolors.WARNING])
        print(f"{r}:")
        print("-"*45)
        print(randColor + "| Service:\v" + bcolors.ENDC + f"{i[1]}" + randColor + "\n| Username:\v" + bcolors.ENDC + f"{username}" + randColor + "\n| Password:\v" + bcolors.ENDC + f"{password}")
        print("-"*45)
        r += 1


# Check and get password for a service
def CheckGetPass(service, hide=1):
                if not CheckService(service):
                    print(bcolors.WARNING + "Service doesn't exist.\n" + bcolors.ENDC)
                    return 0

                passwd = GetPass(service)[0][0]
                passwd = dencr(passwd)
                username = GetUser(service)[0][0]
                username = dencr(username)
                if not hide:
                    print(f"Service: {service}\nUsername: {username}\nPassword: {passwd}")
                    print("-" * 15)
                pc.copy(passwd)
                print(bcolors.GREEN + "Copied to clipboard." + bcolors.ENDC)
                return 1


# Random password
def genman(pass_len, password_string):
    password = ''
    for x in range (0,4):
        Password = random.choice(string.ascii_uppercase) + random.choice(string.ascii_lowercase) + random.choice(string.digits) + random.choice(string.punctuation)
    for y in range(pass_len - 4):
        password = password + random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation)

    password = password + password_string
    return password

# Init the arguments parser
def arginit():
        parser = argparse.ArgumentParser()
        parser.add_argument("-s","--service", help="The service you want to get it's password.")
        parser.add_argument("-u","--unvisable", action="store_true", help="Don't print the results to the terminal.")
        args = parser.parse_args()
        return args.service, args.unvisable

# Main function
def main():
    try:
        print(bcolors.BOLD + f"Hello {getpass.getuser()}." + bcolors.ENDC)
        if not CheckService("masterpasswd"):
            print("""It is your first time in the passman (:
Let us get you a master password,
This is the only password you should remember, and I'll do the other stuff for you.""")
            masterpasswd = input(bcolors.GREEN + "Enter a password to use it as a master password: " + bcolors.ENDC)
            connct = sqlite3.connect(DATA_BASE_PATH)
            cur = connct.cursor()
            datatuple = ("masterpasswd", "masterpasswd", masterpasswd)
            cur.execute(f"""INSERT INTO passwds (SERVICE, USERNAME, PASSWD) VALUES (?,?,?);""",datatuple)
            connct.commit()
            connct.close()
        elif CheckService("masterpasswd"):
            masterpasswd = GetPass("masterpasswd")
            masterpasswd = masterpasswd[0][0]
        else:
            print("Error with the master password ):")
        ans = ""
        while ans != masterpasswd:
            ans = getpass.getpass("Master password: ")
        conn()
        argservice, hide = arginit()
        if argservice:
            if not CheckGetPass(argservice, hide):
                exit(-1)
            else:
                exit(1)
        menu = ""
        clear()


        while menu != '1' or menu != '2':
            menu = Menu()
            if menu == "1" or menu == "add":
                clear()
                serviceName = input("Enter the name of your service: ")
                if serviceName == "back":
                    continue
                if CheckService(serviceName):
                    print(bcolors.WARNING + "Service exist.\n" + bcolors.ENDC)
                    continue
                username = input("Enter your username for this service: ")
                if username == "back":
                    clear()
                    continue

                password = getpass.getpass("Enter a password for this service: ")
                if password == 'back':
                    clear()
                    continue
                confirm  = getpass.getpass("Confirm your password: ")
                if not password == confirm:
                    print(bcolors.WARNING + "Doesn't match, Please try again.\n" + bcolors.ENDC)
                    time.sleep(1)
                    continue
                passwd = encr(password)
                username = encr(username)
                AddPass(serviceName, username, passwd)
                clear()
                print(bcolors.GREEN + "Password Added.\n" + bcolors.ENDC)

            elif menu == "2" or menu == "search":
                clear()
                serviceName = input("Enter service Name: ")
                if serviceName == "back":
                    continue
                if not CheckGetPass(serviceName):
                    continue

            elif menu == "3" or menu == "all":
                printall()
                print("-"*15)

            elif menu == "4" or menu == "delete":
                clear()
                printall()
                print("-"*15)

                serviceName = input("Enter service name to delete: ")
                if serviceName == 'back':
                    print(bcolors.WARNING + "Service doesn't exist.\n" + bcolors.ENDC)
                    continue

                if CheckService(serviceName):
                    Del(serviceName)
                elif not CheckService(serviceName):
                    print("Service doesn't exist.\n")
                    continue
            elif menu == "5" or menu == "make":
                passwd_string =  input("Enter a string  to use it in the password: ")
                if passwd_string == "back":
                    clear()
                    continue
                passwd_len = int(input("Enter the length of the password: "))
                if passwd_len == "back":
                    clear()
                    continue
                passwd = genman(passwd_len, passwd_string)
                print("Password:")
                print(bcolors.GREEN + passwd + bcolors.ENDC + "\n")


            elif menu == "6" or menu == "exit":
                print("\nGood bye.")
                exit()
            elif menu == "clear":
                clear()
            elif menu.lower() in ['hi', 'hillo', 'hey']:
                print(bcolors.GREEN + "Hey there!, I'm using Passman :D" + bcolors.ENDC)
            else :
                print(bcolors.WARNING + "Not a valid command ):" + bcolors.ENDC)
                print("-"* 15)
    except KeyboardInterrupt:
        print(bcolors.WARNING + "\nExiting..." + bcolors.ENDC)
    except Exception as e:
        print(bcolors.WARNING + str(e) + bcolors.ENDC)

if __name__=="__main__":
    main()

